(function(modules) {
    var installedModules = {};
    function __webpack_require__(moduleId) {
        if (installedModules[moduleId]) {
            return installedModules[moduleId].exports;
        }
        var module = installedModules[moduleId] = {
            i: moduleId,
            l: false,
            exports: {}
        };
        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
        module.l = true;
        return module.exports;
    }
    __webpack_require__.m = modules;
    __webpack_require__.c = installedModules;
    __webpack_require__.d = function(exports, name, getter) {
        if (!__webpack_require__.o(exports, name)) {
            Object.defineProperty(exports, name, {
                configurable: false,
                enumerable: true,
                get: getter
            });
        }
    };
    __webpack_require__.n = function(module) {
        var getter = module && module.__esModule ? function getDefault() {
            return module["default"];
        } : function getModuleExports() {
            return module;
        };
        __webpack_require__.d(getter, "a", getter);
        return getter;
    };
    __webpack_require__.o = function(object, property) {
        return Object.prototype.hasOwnProperty.call(object, property);
    };
    __webpack_require__.p = "";
    return __webpack_require__(__webpack_require__.s = 2);
})([ function(module, exports) {
    module.exports = _;
}, function(module, exports, __webpack_require__) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var _ = __webpack_require__(0);
    var ALL_MESSAGES_ID = "_allMessages_";
    function log() {
        var _args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            _args[_i] = arguments[_i];
        }
    }
    var ReportLibMessenger = function() {
        function ReportLibMessenger() {
            this.parentWindow = window.parent;
            this.parentOrigin = "*";
            this.listeners = {};
            log("constructor ReportMessenger");
            window.addEventListener("message", this.messageListener.bind(this));
        }
        ReportLibMessenger.prototype.sendToParent = function(message, returnPromise) {
            try {
                if (returnPromise) {
                    var id = message.id || String(Date.now() + Math.random());
                    var promise = this.listenOnce(id);
                    this.sendToParent(_.extend({}, message, {
                        id: id
                    }));
                    return promise;
                } else {
                    this.parentWindow.postMessage(message, this.parentOrigin);
                }
            } catch (error) {
                console.error("Error while sending message to parent:", message.id, error);
                throw error;
            }
        };
        ReportLibMessenger.prototype.registerListener = function(id, listener, callOnError) {
            if (id === void 0) {
                id = ALL_MESSAGES_ID;
            }
            if (callOnError === void 0) {
                callOnError = false;
            }
            if (!this.listeners[id]) {
                this.listeners[id] = [];
            }
            this.listeners[id].push({
                listener: listener,
                callOnError: callOnError
            });
        };
        ReportLibMessenger.prototype.deRegisterListener = function(id, listener) {
            if (id === void 0) {
                id = ALL_MESSAGES_ID;
            }
            if (listener) {
                this.listeners[id] = this.listeners[id].filter(function(entry) {
                    return entry.listener === listener;
                });
            } else {
                delete this.listeners[id];
            }
        };
        ReportLibMessenger.prototype.deRegisterAllListeners = function() {
            var _this = this;
            _.forOwn(this.listeners, function(_, id) {
                _this.deRegisterListener(id);
            });
        };
        ReportLibMessenger.prototype.listenOnce = function(id) {
            var _this = this;
            if (id === void 0) {
                id = ALL_MESSAGES_ID;
            }
            return new Promise(function(resolve, reject) {
                var listener = function(data, isError) {
                    if (isError) {
                        reject(data);
                    } else {
                        resolve(data);
                    }
                    _this.deRegisterListener(id, listener);
                };
                _this.registerListener(id, listener, true);
            });
        };
        ReportLibMessenger.prototype.messageListener = function(evt) {
            if (evt.source === this.parentWindow) {
                this.parentOrigin = evt.origin;
                var message = evt.data;
                this.callListeners(evt.data.id, message);
                this.callListeners(ALL_MESSAGES_ID, message);
            }
        };
        ReportLibMessenger.prototype.callListeners = function(id, message) {
            var _this = this;
            var listeners = this.listeners[id];
            if (listeners) {
                listeners.forEach(function(entry) {
                    if (message.success) {
                        _this.invokeCallback(id, function() {
                            return entry.listener(message.data);
                        });
                    } else {
                        if (entry.callOnError) {
                            _this.invokeCallback(id, function() {
                                return entry.listener(message.data, true);
                            });
                        } else {
                            console.error(message.data);
                        }
                    }
                });
            }
        };
        ReportLibMessenger.prototype.invokeCallback = function(id, callback) {
            try {
                callback();
            } catch (error) {
                this.showError(error.toString(), "Internal report error while processing " + id);
            }
        };
        ReportLibMessenger.prototype.showError = function(message, title) {
            if (title === void 0) {
                title = "errors.inReport";
            }
            this.sendToParent({
                action: "show-error",
                params: {
                    message: message,
                    title: title
                }
            });
        };
        return ReportLibMessenger;
    }();
    exports.ReportLibMessenger = ReportLibMessenger;
}, function(module, exports, __webpack_require__) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var $ = __webpack_require__(3);
    var _ = __webpack_require__(0);
    var data_model_helpers_1 = __webpack_require__(4);
    var report_lib_filter_class_1 = __webpack_require__(5);
    var report_lib_messenger_class_1 = __webpack_require__(1);
    var report_lib_table_class_1 = __webpack_require__(6);
    function log() {
        var _args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            _args[_i] = arguments[_i];
        }
    }
    var LxCustomReportLib = function() {
        function LxCustomReportLib() {
            this.filter = new report_lib_filter_class_1.ReportLibFilter();
            this.table = new report_lib_table_class_1.ReportLibTable();
            this.dataModelHelpers = new data_model_helpers_1.DataModelHelpers();
            this.messenger = new report_lib_messenger_class_1.ReportLibMessenger();
            this.latestFacetsResults = [];
            this._latestPublishedState = null;
            this.customDropdownCallbacks = {};
            log("constructor LxCustomReportLib");
        }
        Object.defineProperty(LxCustomReportLib.prototype, "latestPublishedState", {
            get: function() {
                return this._latestPublishedState;
            },
            enumerable: true,
            configurable: true
        });
        LxCustomReportLib.prototype.init = function() {
            log("init .. mountSetupCallback & send INIT");
            var promise = this.mountSetupCallback();
            this.messenger.sendToParent({
                action: "INIT",
                params: {
                    version: "0.2.3"
                }
            });
            this.mountDomEventPublishing();
            return promise;
        };
        LxCustomReportLib.prototype.ready = function(configuration) {
            log("report ready", configuration);
            this.translateHtmlTags();
            var requirements = this.createReportRequirements(configuration);
            this.messenger.sendToParent({
                action: "READY",
                params: {
                    requirements: requirements
                }
            });
        };
        LxCustomReportLib.prototype.updateConfiguration = function(configuration) {
            this.messenger.deRegisterAllListeners();
            log("update configuration", configuration);
            var requirements = this.createReportRequirements(configuration);
            this.messenger.sendToParent({
                action: "UPDATE_REQUIREMENTS",
                params: {
                    requirements: requirements
                }
            });
        };
        LxCustomReportLib.prototype.executeGraphQL = function(query, variables) {
            if (variables === void 0) {
                variables = null;
            }
            return this.messenger.sendToParent({
                action: "executeGraphQL",
                params: {
                    query: query,
                    variables: variables
                }
            }, true);
        };
        LxCustomReportLib.prototype.executeParentOriginXHR = function(method, path) {
            return this.messenger.sendToParent({
                action: "parentOriginXHR",
                params: {
                    method: method,
                    path: path
                }
            }, true);
        };
        LxCustomReportLib.prototype.getFilterResult = function() {
            return this.latestFacetsResults;
        };
        LxCustomReportLib.prototype.requestFactSheetSelection = function(config) {
            this.messenger.sendToParent({
                action: "fs-selection",
                params: config
            });
            return this.messenger.listenOnce("fs-selection.result").then(function(message) {
                return message.results;
            });
        };
        LxCustomReportLib.prototype.openLink = function(url, target) {
            if (target === void 0) {
                target = "_self";
            }
            this.messenger.sendToParent({
                action: "open-link",
                params: {
                    url: url,
                    target: target
                }
            });
        };
        LxCustomReportLib.prototype.openRouterLink = function(url) {
            this.messenger.sendToParent({
                action: "open-router-link",
                params: {
                    url: url
                }
            });
        };
        LxCustomReportLib.prototype.publishState = function(state) {
            this._latestPublishedState = state;
            this.messenger.sendToParent({
                action: "state-changed",
                params: {
                    state: state
                }
            });
        };
        LxCustomReportLib.prototype.showSpinner = function(text) {
            if (text === void 0) {
                text = "";
            }
            this.messenger.sendToParent({
                action: "change-spinner-state",
                params: {
                    visible: true,
                    text: text
                }
            });
        };
        LxCustomReportLib.prototype.hideSpinner = function() {
            this.messenger.sendToParent({
                action: "change-spinner-state",
                params: {
                    visible: false
                }
            });
        };
        LxCustomReportLib.prototype.showEditToggle = function() {
            this.messenger.sendToParent({
                action: "change-edit-toggle-visibility",
                params: {
                    visible: true
                }
            });
        };
        LxCustomReportLib.prototype.hideEditToggle = function() {
            this.messenger.sendToParent({
                action: "change-edit-toggle-visibility",
                params: {
                    visible: false
                }
            });
        };
        LxCustomReportLib.prototype.sendExcludedFactSheets = function(excludedData) {
            this.messenger.sendToParent({
                action: "excluded-data-changed",
                params: {
                    excludedData: excludedData
                }
            });
        };
        LxCustomReportLib.prototype.translateCustomKey = function(key, interpolationData) {
            if (interpolationData === void 0) {
                interpolationData = {};
            }
            var customTranslations = this.currentSetup.settings.translations.custom;
            if (!customTranslations) {
                return key;
            }
            var translation = _.get(customTranslations, key);
            if (!translation) {
                console.warn(key + " not found in translations");
                return key;
            }
            return _.isString(translation) ? this.replaceInterpolations(translation, interpolationData) : translation;
        };
        LxCustomReportLib.prototype.translateFactSheetType = function(fsType, multiplicity) {
            if (!this.currentSetup.settings.translations.factSheetTypes) {
                return fsType;
            }
            var key = multiplicity ? fsType + "." + multiplicity : fsType;
            return this.currentSetup.settings.translations.factSheetTypes[key] || fsType;
        };
        LxCustomReportLib.prototype.translateField = function(fsType, fieldName) {
            if (!this.currentSetup.settings.translations || !this.currentSetup.settings.translations.fields[fsType]) {
                return fieldName;
            }
            return this.currentSetup.settings.translations.fields[fsType][fieldName].label;
        };
        LxCustomReportLib.prototype.translateFieldValue = function(fsType, fieldName, value) {
            var translations = this.currentSetup.settings.translations;
            if (!translations || !translations.fields[fsType] || !translations.fields[fsType][fieldName] || !translations.fields[fsType][fieldName].values || !translations.fields[fsType][fieldName].values[value]) {
                return value;
            }
            return translations.fields[fsType][fieldName].values[value].label;
        };
        LxCustomReportLib.prototype.translateRelation = function(directionalRelationName) {
            if (!this.currentSetup.settings.translations) {
                return directionalRelationName;
            }
            var relTranslation = this.currentSetup.settings.translations.relations[directionalRelationName];
            if (!relTranslation) {
                return directionalRelationName;
            } else {
                return this.currentSetup.settings.translations.relations[directionalRelationName].label;
            }
        };
        LxCustomReportLib.prototype.formatCurrency = function(value, minimumFractionDigits) {
            if (minimumFractionDigits === void 0) {
                minimumFractionDigits = 0;
            }
            var currencySettings = this.currentSetup.settings.currency;
            if (window["Intl"] && window["Intl"].NumberFormat) {
                return new Intl.NumberFormat(undefined, {
                    style: "currency",
                    currency: currencySettings.code,
                    minimumFractionDigits: minimumFractionDigits
                }).format(value);
            } else {
                return "" + currencySettings.symbol + value;
            }
        };
        LxCustomReportLib.prototype.createReportRequirements = function(config) {
            var pureConfiguration = this.mountCallbacks(config);
            return Object.assign({}, pureConfiguration, {
                showView: !!config.reportViewCallback
            });
        };
        LxCustomReportLib.prototype.mountCallbacks = function(config) {
            var _this = this;
            var newConfig = _.cloneDeep(config);
            newConfig = this.mountCallback(newConfig, "report-view-changed", [ "reportViewCallback" ]);
            newConfig = this.mountCallback(newConfig, "configure", [ "menuActions", "configureCallback" ]);
            newConfig = this.mountRestoreCallback(newConfig);
            newConfig = this.mountTableConfigCallback(newConfig);
            newConfig = this.mountExportDataCallback(newConfig);
            newConfig = this.mountCallback(newConfig, "toggle-editing", [ "toggleEditingCallback" ]);
            newConfig = this.mountCustomDropdownSelectionCallbacks(newConfig);
            if (config && config.facets) {
                newConfig.facets = config.facets.map(function(fc, idx) {
                    return _this.mountFacetsCallbacks(fc, idx);
                });
            }
            this.validateConfig(newConfig);
            return newConfig;
        };
        LxCustomReportLib.prototype.mountFacetsCallbacks = function(facetsConfig, index) {
            var newConfig = _.omit(facetsConfig, "callback");
            var doNothing = function() {};
            var callbackFn = facetsConfig.callback || doNothing;
            var callbackId = this.mountFacetsResultCallback(facetsConfig.key, callbackFn);
            newConfig = _.extend(newConfig, {
                callback: callbackId
            });
            if (facetsConfig.facetChangedCallback) {
                var facetChangedCallbackId = "facet-changed." + index;
                this.messenger.registerListener(facetChangedCallbackId, facetsConfig.facetChangedCallback);
                newConfig = _.omit(newConfig, "facetChangedCallback");
                newConfig = _.extend(newConfig, {
                    facetChangedCallback: facetChangedCallbackId
                });
            }
            if (facetsConfig.facetFiltersChangedCallback) {
                var facetFiltersChangedCallbackId = "facet-filters-changed." + index;
                this.messenger.registerListener(facetFiltersChangedCallbackId, facetsConfig.facetFiltersChangedCallback);
                newConfig = _.omit(newConfig, "facetFiltersChangedCallback");
                newConfig = _.extend(newConfig, {
                    facetFiltersChangedCallback: facetFiltersChangedCallbackId
                });
            }
            this.table.setFacetsConfig(facetsConfig, index);
            return newConfig;
        };
        LxCustomReportLib.prototype.mountFacetsResultCallback = function(facetsConfigKey, cb) {
            var _this = this;
            var callbackId = "facets.callback." + facetsConfigKey;
            this.messenger.registerListener(callbackId, function(arg) {
                _this.latestFacetsResults = arg.facetsResults;
                cb(arg.facetsResults);
            });
            return callbackId;
        };
        LxCustomReportLib.prototype.validateConfig = function(config) {
            Object.keys(config).filter(function(k) {
                return typeof config[k] === "function";
            }).forEach(function(f) {
                console.error("ERROR: '" + f + "' does not seem to belong in report config");
            });
        };
        LxCustomReportLib.prototype.mountSetupCallback = function() {
            var _this = this;
            return new Promise(function(resolve, reject) {
                _this.messenger.listenOnce("setup").then(function(reportSetup) {
                    var locationQuery = _this.getLocationQuery();
                    if (!locationQuery) {
                        console.error('No location query! location.search="' + location.search + '"');
                    }
                    var queryReportId = locationQuery["reportId"];
                    if (reportSetup.reportId === queryReportId) {
                        _this.currentSetup = reportSetup;
                        resolve(reportSetup);
                    } else {
                        reject("Report ID mismatch: '" + queryReportId + "' != 'reportSetup.reportId' (" + reportSetup.reportId + ")");
                    }
                });
            });
        };
        LxCustomReportLib.prototype.mountRestoreCallback = function(config) {
            var _this = this;
            if ("restoreStateCallback" in config) {
                var originalCb_1 = config.restoreStateCallback;
                config.restoreStateCallback = function(state) {
                    if (state.facetsResults) {
                        _this.latestFacetsResults = state.facetsResults;
                    }
                    originalCb_1(state);
                };
                return this.mountCallback(config, "restore-state", [ "restoreStateCallback" ]);
            }
            return config;
        };
        LxCustomReportLib.prototype.mountCustomDropdownSelectionCallbacks = function(config) {
            var _this = this;
            if (config.menuActions && config.menuActions.customDropdowns) {
                config.menuActions.customDropdowns.forEach(function(dropdown) {
                    var callbacks = {};
                    dropdown.entries.forEach(function(entry) {
                        var callbackFn = entry.callback;
                        callbacks[entry.id] = function() {
                            return callbackFn(entry);
                        };
                        _.unset(entry, "callback");
                    });
                    _this.customDropdownCallbacks[dropdown.id] = callbacks;
                });
                this.messenger.registerListener("custom-dropdown-selection", function(data) {
                    var dropdown = _this.customDropdownCallbacks[data.dropdownId];
                    if (dropdown) {
                        var entryCallback = dropdown[data.entryId];
                        if (entryCallback) {
                            entryCallback();
                        } else {
                            console.warn("Callback for ", data, " could not be found!");
                        }
                    } else {
                        console.warn("Callback for ", data, " could not be found!");
                    }
                });
            }
            return config;
        };
        LxCustomReportLib.prototype.mountExportDataCallback = function(config) {
            var _this = this;
            var originalConfig = _.cloneDeep(config);
            this.messenger.registerListener("request-export-data", function() {
                _this.createReportExportData(originalConfig).then(function(data) {
                    return _this.messenger.sendToParent({
                        action: "export-data",
                        params: data
                    });
                });
            });
            _.unset(config, "export.beforeExport");
            return config;
        };
        LxCustomReportLib.prototype.mountTableConfigCallback = function(config) {
            var _this = this;
            var responseMessageAction = "table-config";
            if ("tableConfigCallback" in config) {
                var originalCb_2 = config.tableConfigCallback;
                config.tableConfigCallback = function() {
                    var tableConfig = originalCb_2();
                    _this.messenger.sendToParent({
                        action: responseMessageAction,
                        params: tableConfig
                    });
                    return tableConfig;
                };
            } else {
                config.tableConfigCallback = function() {
                    var tableConfig = {
                        factSheetType: "Default",
                        attributes: []
                    };
                    _this.messenger.sendToParent({
                        action: responseMessageAction,
                        params: tableConfig
                    });
                    return tableConfig;
                };
            }
            return this.mountCallback(config, "request-table-config", [ "tableConfigCallback" ]);
        };
        LxCustomReportLib.prototype.mountCallback = function(config, messageId, callbackName) {
            var callback = _.get(config, callbackName) || function() {};
            this.messenger.deRegisterListener(messageId);
            this.messenger.registerListener(messageId, callback);
            _.unset(config, callbackName);
            return config;
        };
        LxCustomReportLib.prototype.getLocationQuery = function() {
            return _.chain(location.search ? location.search.slice(1).split("&") : "").map(function(item) {
                var p = item.split("=");
                return [ p[0], decodeURI(p[1]) ];
            }).fromPairs().omitBy(_.isEmpty).toJSON();
        };
        LxCustomReportLib.prototype.createReportExportData = function(reportConfig) {
            var _this = this;
            var exportConfig = reportConfig.export || {};
            exportConfig.inputType = exportConfig.inputType || "HTML";
            exportConfig.exportElementSelector = exportConfig.exportElementSelector || (exportConfig.inputType === "SVG" ? "svg" : "body");
            var selector = exportConfig.exportElementSelector;
            var el = $(selector).clone().addClass("forExport");
            var orientation = exportConfig.orientation || "landscape";
            var autoScale = orientation === "landscape";
            return this.encodeAllImages(el, exportConfig.inputType).then(function() {
                if (reportConfig.export && reportConfig.export.beforeExport) {
                    el = reportConfig.export.beforeExport(el);
                }
                var data = el.get(0).outerHTML;
                data = data.replace(/<a.*?>(.*?)<\/a>/g, "$1");
                var stylesPromise = _this.getCurrentStyles();
                return stylesPromise.then(function(styles) {
                    return {
                        data: data,
                        styles: styles,
                        inputType: exportConfig.inputType,
                        paperSize: {
                            format: exportConfig.format || "a4"
                        },
                        orientation: orientation,
                        autoScale: typeof exportConfig.autoScale !== "undefined" ? exportConfig.autoScale : autoScale
                    };
                });
            });
        };
        LxCustomReportLib.prototype.getCurrentStyles = function() {
            var _this = this;
            if (!location.origin) {
                location.origin = window.location.protocol + "//" + window.location.hostname + (window.location.port ? ":" + window.location.port : "");
            }
            var documentStyles = document.styleSheets;
            var promises = _(documentStyles).values().map(function(styleSheet) {
                var cssRules;
                try {
                    cssRules = styleSheet.cssRules;
                } catch (e) {
                    if (e.name !== "SecurityError") {
                        throw e;
                    }
                    console.warn(e);
                }
                if (cssRules) {
                    var combinedCss = _.map(cssRules, function(rule) {
                        try {
                            return rule.cssText;
                        } catch (e) {
                            return "";
                        }
                    }).join(" ");
                    return Promise.resolve(combinedCss);
                } else if (styleSheet.href && styleSheet.href.indexOf(location.origin) === 0) {
                    return _this.executeParentOriginXHR("GET", styleSheet.href).then(function(response) {
                        return response.body;
                    }).catch(function(err) {
                        console.error(err);
                        return "";
                    });
                }
            }).value();
            return Promise.all(promises).then(function(styles) {
                return styles.join(" ");
            });
        };
        LxCustomReportLib.prototype.encodeAllImages = function(el, inputType) {
            var _this = this;
            var encodePromises = [];
            el.find("img").each(function(_idx, img) {
                _this.encodeImage(img);
            });
            if (inputType === "SVG") {
                el.find("image").each(function(_idx, img) {
                    encodePromises.push(_this.encodeSvgImage(img));
                });
            }
            return Promise.all(encodePromises);
        };
        LxCustomReportLib.prototype.encodeImage = function(image) {
            var canvas = document.createElement("canvas");
            canvas.width = image.width;
            canvas.height = image.height;
            var ctx = canvas.getContext("2d");
            ctx.drawImage(image, 0, 0);
            image.src = canvas.toDataURL("image/png");
        };
        LxCustomReportLib.prototype.encodeSvgImage = function(image) {
            var _this = this;
            var width = image.width.baseVal.value;
            var height = image.height.baseVal.value;
            var baseVal = image.href.baseVal;
            var htmlImage = $('\n      <img crossorigin="Anonymous" width="' + width + '" height="' + height + '" src="' + baseVal + '">\n    ')[0];
            return new Promise(function(resolve) {
                htmlImage.onload = function() {
                    _this.encodeImage(htmlImage);
                    image.setAttribute("href", htmlImage.src);
                    resolve({
                        baseVal: baseVal,
                        encodedVal: htmlImage.src
                    });
                };
            });
        };
        LxCustomReportLib.prototype.translateHtmlTags = function() {
            var _this = this;
            $("[data-lxtranslate]").each(function(_idx, element) {
                var key = element.getAttribute("data-lxtranslate");
                $(element).html(_this.translateCustomKey(key));
            });
        };
        LxCustomReportLib.prototype.replaceInterpolations = function(text, data) {
            if (data === void 0) {
                data = {};
            }
            if (text) {
                return text.replace(/{{[^}]+}}/g, function(foundText) {
                    var key = _.trim(foundText.slice(2, -2));
                    if (key in data) {
                        return data[key];
                    } else {
                        console.warn("The interpolation '" + foundText + "' is not supported");
                        return foundText;
                    }
                });
            }
            return text;
        };
        LxCustomReportLib.prototype.mountDomEventPublishing = function() {
            var _this = this;
            var events = [ "keyup" ];
            events.forEach(function(eventType) {
                $(document).bind(eventType, function(event) {
                    var params = _.pickBy(event, function(v) {
                        return !_.isObjectLike(v) && !_.isFunction(v);
                    });
                    _this.messenger.sendToParent({
                        action: "dom-event",
                        params: params
                    });
                });
            });
        };
        return LxCustomReportLib;
    }();
    exports.LxCustomReportLib = LxCustomReportLib;
    exports.lxCustomReportLib = new LxCustomReportLib();
    window["lx"] = exports.lxCustomReportLib;
}, function(module, exports) {
    module.exports = $;
}, function(module, exports, __webpack_require__) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var DataModelHelpers = function() {
        function DataModelHelpers() {}
        DataModelHelpers.prototype.getRelationDefinition = function(enrichedDataModel, directionalRelation) {
            var persistedName = enrichedDataModel.relationMapping[directionalRelation].persistedName;
            if (!(persistedName in enrichedDataModel.relations)) {
                console.warn("Relation " + persistedName + " could not be found in enrichedDataModel.relations");
                return null;
            }
            return enrichedDataModel.relations[persistedName];
        };
        DataModelHelpers.prototype.isConstrainingRelation = function(enrichedDataModel, relationName) {
            var relDef = this.getRelationDefinition(enrichedDataModel, relationName);
            return relDef && relDef.constrainingRelations && relDef.constrainingRelations.length > 0;
        };
        return DataModelHelpers;
    }();
    exports.DataModelHelpers = DataModelHelpers;
}, function(module, exports, __webpack_require__) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var report_lib_messenger_class_1 = __webpack_require__(1);
    var ReportLibFilter = function() {
        function ReportLibFilter() {
            this.messenger = new report_lib_messenger_class_1.ReportLibMessenger();
        }
        ReportLibFilter.prototype.getSelectedFilters = function() {
            return this.messenger.sendToParent({
                action: "filter.get-selected-filters"
            }, true);
        };
        return ReportLibFilter;
    }();
    exports.ReportLibFilter = ReportLibFilter;
}, function(module, exports, __webpack_require__) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var _ = __webpack_require__(0);
    var report_lib_messenger_class_1 = __webpack_require__(1);
    var ReportTablePopoverStyles = function() {
        function ReportTablePopoverStyles() {
            this.top = 0;
            this.width = 500;
            this.arrowLeft = "50%";
        }
        return ReportTablePopoverStyles;
    }();
    exports.ReportTablePopoverStyles = ReportTablePopoverStyles;
    var ReportTablePopoverParams = function() {
        function ReportTablePopoverParams() {
            this.factSheets = [];
            this.styles = new ReportTablePopoverStyles();
            this.maxRows = -1;
        }
        return ReportTablePopoverParams;
    }();
    exports.ReportTablePopoverParams = ReportTablePopoverParams;
    var ReportLibTable = function() {
        function ReportLibTable() {
            this.messenger = new report_lib_messenger_class_1.ReportLibMessenger();
            this.facetsConfigs = [];
        }
        ReportLibTable.prototype.showPopover = function(params) {
            var _this = this;
            var attributesPresent = _.every(this.facetsConfigs, function(config) {
                return _this.attributesPresentInConfig(config, [ "id", "type" ]);
            });
            if (!attributesPresent) {
                throw new Error("The attributes 'id' and 'type' are mandatory for displaying report popover dialogs.");
            }
            return this.messenger.sendToParent({
                action: "table.show-popover",
                params: params
            });
        };
        ReportLibTable.prototype.hidePopover = function() {
            return this.messenger.sendToParent({
                action: "table.hide-popover"
            });
        };
        ReportLibTable.prototype.setFacetsConfig = function(facetsConfig, index) {
            this.facetsConfigs[index] = facetsConfig;
        };
        ReportLibTable.prototype.attributesPresentInConfig = function(config, requiredAttributes) {
            var attributes = _(config.attributes).map(function(attr) {
                while (/{/.test(attr)) {
                    attr = attr.replace(/{[^{]*?}/g, "");
                }
                return attr.split(/ +/);
            }).flatten().compact().value();
            return _.difference(requiredAttributes, attributes).length === 0;
        };
        return ReportLibTable;
    }();
    exports.ReportLibTable = ReportLibTable;
} ]);
